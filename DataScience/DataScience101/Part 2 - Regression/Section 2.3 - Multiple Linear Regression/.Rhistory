par(mfrow=c(1,1))
boxplot(dati2[1:30],dati2[31:60],dati2[61:90],dati2[91:120],dati2[121:150],
dati2[151:180],dati2[181:210],dati2[211:240],dati2[241:270], names=names[1:9], main="Boxplot for Precision : ALU Material")
PlotDensityCompare(dati2[1:270],9,30,names[1:9],"Different Distribution ALU")
SeveralSamplesOverview(dati1[,1:9])
PlotStatistics(dati1[,1:9],names[1:9],"Precision","ALU")
# NO-ALU Analysis
par(mfrow=c(1,1))
boxplot(dati2[271:300],dati2[301:330],dati2[331:360],dati2[361:390],dati2[391:420],
dati2[421:450],dati2[451:480],dati2[481:510],dati2[511:540], names=names[10:18], main="Boxplot for Precision : NO-ALU Material")
PlotDensityCompare(dati2[271:540],9,30,names[10:18],"Different Distribution NO-ALU")
SeveralSamplesOverview(dati1[,10:18])
PlotStatistics(dati1[,10:18],names[10:18],"Precision","NO-ALU")
# Inferenza ALU Vs NO-ALU
InferentialTests(dati2[1:270],dati2[271:540],c("ALU","NO-ALU"))
# Operator 1 Analysis
par(mfrow=c(1,1))
boxplot(dati2[1:30],dati2[31:60],dati2[61:90],dati2[271:300],dati2[301:330],dati2[331:360],
names=names[c(1:3,10:12)], main="Boxplot for Precision : Operator 1")
PlotDensityCompare(dati2[c(1:90,271:360)],6,30,names[c(1:3,10:12)],"Different Distribution for Operator 1")
SeveralSamplesOverview(dati1[,c(1:3,10:12)])
PlotStatistics(dati1[,c(1:3,10:12)],names[c(1:3,10:12)],"Precision","Operator 1")
# Operator 2 Analysis
par(mfrow=c(1,1))
boxplot(dati2[91:120],dati2[121:150],dati2[151:180],dati2[361:390],dati2[391:420],dati2[421:450],
names=names[c(4:6,13:15)], main="Boxplot for Precision : Operator 2")
PlotDensityCompare(dati2[c(91:180,361:450)],6,30,names[c(4:6,13:15)],"Different Distribution for Operator 2")
SeveralSamplesOverview(dati1[,c(4:6,13:15)])
PlotStatistics(dati1[,c(4:6,13:15)],names[c(4:6,13:15)],"Precision","Operator 2")
# Operator 3 Analysis
par(mfrow=c(1,1))
boxplot(dati2[181:210],dati2[211:240],dati2[241:270],dati2[451:480],dati2[481:510],dati2[511:540],
names=names[c(7:9,16:18)], main="Boxplot for Precision : Operator 3")
PlotDensityCompare(dati2[c(181:270,451:540)],6,30,names[c(7:9,16:18)],"Different Distribution for Operator 3")
SeveralSamplesOverview(dati1[,c(7:9,16:18)])
PlotStatistics(dati1[,c(7:9,16:18)],names[c(7:9,16:18)],"Precision","Operator 3")
# Inferenza Operator1 Vs Operator2
InferentialTests(dati2[c(1:90,271:360)],dati2[c(91:180,361:450)],c("Operator 1","Operator 2"))
# Inferenza Operator2 Vs Operator3
InferentialTests(dati2[c(91:180,361:450)],dati2[c(181:270,451:540)],c("Operator 2","Operator 3"))
# Inferenza Operator1 Vs Operator3
InferentialTests(dati2[c(1:90,271:360)],dati2[c(181:270,451:540)],c("Operator 1","Operator 3"))
# Giorno 1 Analysis
par(mfrow=c(1,1))
boxplot(dati2[1:30],dati2[91:120],dati2[181:210],dati2[271:300],dati2[361:390],dati2[451:480],
names=names[c(1,4,7,10,13,16)], main="Boxplot for Precision : Day 1")
PlotDensityCompare(dati2[c(1:30,91:120,181:210,271:300,361:390,451:480)],6,30,names[c(1,4,7,10,13,16)],"Different Distribution for Day 1")
SeveralSamplesOverview(dati1[,c(1,4,7,10,13,16)])
PlotStatistics(dati1[,c(1,4,7,10,13,16)],names[c(1,4,7,10,13,16)],"Precision","Day 1")
# Giorno 2 Analysis
par(mfrow=c(1,1))
boxplot(dati2[31:60],dati2[121:150],dati2[211:240],dati2[301:330],dati2[391:420],dati2[481:510],
names=names[c(2,5,8,11,14,17)], main="Boxplot for Precision : Day 2")
PlotDensityCompare(dati2[c(31:60,121:150,211:240,301:330,391:420,481:510)],6,30,names[c(2,5,8,11,14,17)],"Different Distribution for Day 2")
SeveralSamplesOverview(dati1[,c(2,5,8,11,14,17)])
PlotStatistics(dati1[,c(2,5,8,11,14,17)],names[c(2,5,8,11,14,17)],"Precision","Day 2")
# Giorno 3 Analysis
par(mfrow=c(1,1))
boxplot(dati2[61:90],dati2[151:180],dati2[241:270],dati2[331:360],dati2[421:450],dati2[511:540],
names=names[c(3,6,9,12,15,18)], main="Boxplot for Precision : Day 3")
PlotDensityCompare(dati2[c(61:90,151:180,241:270,331:360,421:450,511:540)],6,30,names[c(3,6,9,12,15,18)],"Different Distribution for Day 3")
SeveralSamplesOverview(dati1[,c(3,6,9,12,15,18)])
PlotStatistics(dati1[,c(3,6,9,12,15,18)],names[c(3,6,9,12,15,18)],"Precision","Day 3")
# Inferenza Day1 Vs Day2
InferentialTests(dati2[c(1:30,91:120,181:210,271:300,361:390,451:480)],dati2[c(31:60,121:150,211:240,301:330,391:420,481:510)],c("Day 1","Day 2"))
# Inferenza Day2 Vs Day3
InferentialTests(dati2[c(31:60,121:150,211:240,301:330,391:420,481:510)],dati2[c(61:90,151:180,241:270,331:360,421:450,511:540)],c("Day 2","Day 3"))
# Inferenza Day1 Vs Day3
InferentialTests(dati2[c(1:30,91:120,181:210,271:300,361:390,451:480)],dati2[c(61:90,151:180,241:270,331:360,421:450,511:540)],c("Day 1","Day 3"))
}
}
####################################################################################
################################## FUNCTIONS #######################################
####################################################################################
##################################
# Import Data
#
##################################
ImportData<-function(Material){
if (Material =="Distribution") {
dati1 <- read.table("./data/Raw Data Validation RT/Distribution/Menth-ALU.txt", header=TRUE)
dati2 <- read.table("./data/Raw Data Validation RT/Distribution/Menth-NOALU.txt", header=TRUE)
dati3 <- read.table("./data/Raw Data Validation RT/Distribution/Regular-ALU.txt", header=TRUE)
dati4 <- read.table("./data/Raw Data Validation RT/Distribution/RegularNOALU.txt", header=TRUE)
return(list(dati1, dati2, dati3, dati4))}
else if (Material =="Equivalence") {
dati1 <- read.table("./data/Raw Data Validation RT/Equivalence/Equivalence.txt", header=TRUE)
dati2 <- read.table("./data/Raw Data Validation RT/Equivalence/Regular-ALU.txt", header=TRUE)
return(list(dati1, dati2))}
else if (Material =="Robustness") {
dati1 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%200mm.txt", header=TRUE)
dati2 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%400mm.txt", header=TRUE)
dati3 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%200mm.txt", header=TRUE)
dati4 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%400mm.txt", header=TRUE)
dati5 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%200mm.txt", header=TRUE)
dati6 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%400mm.txt", header=TRUE)
dati7 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%200mm.txt", header=TRUE)
dati8 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%400mm.txt", header=TRUE)
return(list(dati1, dati2, dati3, dati4, dati5, dati6, dati7, dati8))}
else if (Material=="Precision"){
dir<-paste("./data/Precision/", sep="")
ld <-list.dirs(dir)
lf <-list.files(ld,pattern = ".txt",full.names = T)
dati<-as.data.frame(matrix(seq(1:30),ncol=1,nrow = 30))
dati2<-c()
for (i in (1:18)){
file <- read.table(file=lf[i], header=TRUE)
file$N <- NULL
dati<-cbind(dati, file)
file<-file[,1]
dati2<-c(dati2,file)
}
return(list(dati, dati2))}
}
###############################
# Normality Test
#
###############################
NormalityTest<-function(val, Var, Material) {
x<-list()
x$sd<-sd(val)
# Normality test Shapiro-Francia
if (x$sd!=0) {
print(paste("Normality Test for ",Material, sep=""))
x$sf.test<-sf.test(val)
print(x$sf.test)
if (x$sf.test$p.value <=0.05) {
print("The Shapiro-Francia test rejects the Null Hypothesis of Normality of the distribution")
} else {
print("The Shapiro-Francia test does not reject the Null Hypothesis of Normality of the distribution")
}
#test di normalit? Pearson
x$pearson.test<-pearson.test(val)
print(x$pearson.test)
if (x$pearson.test$p.value <=0.05) {
print("The Chi-Square Pearson's test rejects the Null Hypothesis of Normality of the distribution")
} else {
print("The Chi-Square Pearson's test does not reject the Null Hypothesis of Normality of the distribution")
}
#test di normalit? Shapiro-Wiki
x$shapiro.test<-shapiro.test(val)
print(x$shapiro.test)
if (x$shapiro.test$p.value <=0.05) {
print("The Shapiro-Wiki test rejects the Null Hypothesis of Normality of the distribution")
} else {
print("The Shapiro-Wiki test does not reject the Null Hypothesis of Normality of the distribution")
}
} else {
print("Not Possibile to perform a Normality Shapiro Test... Standard deviation = 0")
}
return(x)
}
###############################
# Inferential Tests
#
###############################
InferentialTests<-function(val1, val2,tmpnames) {
print(paste( "XXXXXXX ", tmpnames[1], " - ", tmpnames[2], ": t-test and F-test  XXXXXXX"))
#print(anova(lm(val1~val2)))
print("XXXXXXX t test XXXXXXX")
x=t.test(val1,val2)
print(x)
if (x$p.value <=0.05) {
print("The t-test rejects the Null Hypothesis of equality of means: true difference in means is not equal to 0")
} else {
print("The t-test does not reject the Null Hypothesis of equality of means")
}
print("XXXXXXX F test XXXXXXX")
print(var.test(val1,val2, alternative = "two.sided"))
if (x$p.value <=0.05) {
print("The F-test rejects the Null Hypothesis of equality of variances: true ratio of variances is not equal to 1")
} else {
print("The F-test does not reject the Null Hypothesis of equality of variances")
}
}
###############################
# Sample Basic Statistics
#
###############################
SampleOverview<-function(val) {
x<-list()
# Basic Statistics
x$summary<-summary(val)
print(x$summary)
x$len<-length(val)
print(paste("Number of Tests -> ", x$len, sep=""))
x$mean<-mean(val)
print(paste("Sample Mean -> ",round(x$mean,2), sep=""))
x$var<-var(val)
print(paste("Sample Variance -> ", round(x$var,2), sep=""))
x$sd<-sd(val)
print(paste("Sample Standard Deviation -> ", round(x$sd,2), sep=""))
x$stderrmean<-x$sd/sqrt(x$len)
print(paste("Sample Standard Error of the Mean -> ", round(x$stderrmean,2), sep=""))
x$cv<-x$sd/x$mean*100
print(paste("Sample Variance Coefficient -> ", round(x$cv,2), sep=""))
x$ErrorCI95 <- qt(0.975,df=x$len-1)*x$stderrmean
print(paste("Confident interval of the mean at CL 95% -> ", x$mean, " +- ", round(x$ErrorCI95,2), sep=""))
return(x)
}
###############################
# Samples Inferential statistics
#
###############################
SeveralSamplesOverview<-function(df) {
x<-list()
x$pnum=length(df[1,])
x$tnum=0
x$tnum2=0
for (i in (1:x$pnum)){x$tnum=x$tnum+length(df[,i])
x$tnum2=x$tnum2+length(df[,i])^2}
# Basic Statistics
val=0
for (i in (1:x$pnum)){val=val+(length(df[,i])*mean(df[,i]))}
x$X = val/x$tnum
print(paste("Global Arithmetic Mean -> ", round(x$X,2), sep=""))
val=0
for (i in (1:x$pnum)){val=val+length(df[,i])*(mean(df[,i])- x$X)^2}
x$SX2 = 1/(x$pnum-1)*val
print(paste("Variance Between Sample Means -> ", round(x$SX2,2), sep=""))
val1=0
val2=0
for (i in (1:x$pnum)){val1=val1+(length(df[,i])-1)*var(df[,i])
val2=val2+(length(df[,i])-1)}
x$Sr2 = val1/val2
print(paste("Residual Variance -> ", round(x$Sr2,2), sep=""))
x$r = 2*sqrt(2)*sqrt(x$Sr2)
print(paste("Repeatability Limit r -> ", round(x$r,2), sep=""))
if(x$SX2 < x$Sr2){x$SL2=0}else{
tempn=1/(x$pnum-1)*(x$tnum-x$tnum2/x$tnum)
x$SL2 = (x$SX2 - x$Sr2) / tempn}
print(paste("Estimate of the between days Variance -> ", round(x$SL2,2), sep=""))
x$SR2=x$Sr2+x$SL2
print(paste("Estimate of the Reproducibility Variance -> ", round(x$SR2,2), sep=""))
x$R=2*sqrt(2)*sqrt(x$SR2)
print(paste("Reproducibility Limit R -> ", round(x$R,2), sep=""))
x$SIP=x$Sr2+x$SL2
print(paste("Estimate of the Intermediate Precision Variance -> ", round(x$SIP,2), sep=""))
x$IP=2*sqrt(2)*sqrt(x$SIP)
print(paste("Intermediate Precision Limit -> ", round(x$IP,2), sep=""))
x$CD95=sqrt(x$R^2-x$r^2*(1-2/(2*length(df[,1]))))
print(paste("Critical Difference at 95% CI -> ", round(x$CD95,2), sep=""))
}
################################
# Vari PLOT
# Box Plot, Density, QQ, Comparison, Box PLot 2 and Density Comparison
################################
PlotBox<-function(df,Var, DeleteOutliers, Material){
par(mfrow = c(1,1))
OutVals = boxplot(df[Var], main=paste(Material, ": Boxplot of ",Var, sep=""), ylab = Var)
if (DeleteOutliers){
minq = max(min(df[[Var]]), min(OutVals$stats))
maxq = min(max(df[[Var]]), max(OutVals$stats))
val <- df[Var][df[Var]>=minq & df[Var]<=maxq]
boxplot(Var, ylab  = Var, main=paste(Material,": Boxplot without outliers of ",Var, sep=""), ylab = Var)
if (length(OutVals$out)>0){print(c(cat(Material, "-", Var, ": Delete Outliers" ),df[Var][df[Var]<minq | df[Var]>maxq]))}
} else {val <- df[,Var]}
return(val)
}
PlotDensity<-function(val,Var, Material){
par(mfrow = c(1,1))
# plot Density and Cumulative Distribution
print("plot Density and Cumulative Distribution" )
plot(ecdf(val),main=paste(Material, ": Empirical cumulative distribution function of ",Var, sep=""))
}
PlotQQ<-function(val,Var, Material){
par(mfrow = c(1,1))
# plot QQ PLot
z.norm<-(val-mean(val))/sd(val) ## standardized data
qqnorm(z.norm, main=paste(Material, ": Normal Q-Q Plot of ",Var, sep="")) ## drawing the QQplot
abline(0,1) ## drawing a 45-degree reference line
}
PlotComparison<-function(val,Var, Material){
par(mfrow = c(1,1))
# Comparison between hist and standard Normal distribution
print("Comparison between hist and standard Normal distribution" )
par(mfrow = c(1,2))
h<-hist(val,breaks=8, main=paste(Material, ": Histogram of ",Var, sep=""))
xhist<-c(min(h$breaks),h$breaks)
yhist<-c(0,h$density,0)
xfit<-seq(min(val),max(val),length=40)
yfit<-dnorm(xfit,mean=mean(val),sd=sd(val))
plot(xhist,yhist,type="s",ylim=c(0,max(yhist,yfit)), main=paste(Material, ": Normal Vs histogram of ",Var, sep=""))
lines(xfit,yfit, col="darkblue")
}
PlotDensityCompare<-function(bs, pnum, lnum, tmplegend, tmptitle){
par(mfrow = c(1,1))
colors=c("red", "blue", "green", "black", "orange", "purple", "grey")
Lotto    <- c()
for (i in (1:pnum)){ Lotto    <- c(Lotto, rep(i,lnum))}
sm.density.compare(bs,Lotto, xlab="Values")
title(main=tmptitle)
legend("topleft",legend=tmplegend,col=colors[1:pnum], lty=1:5, cex=0.8)
return(Lotto)
}
PlotStatistics<-function(df,tmpname, Material, Var){
par(mfrow =c(2,2),oma=c(0,0,2,0))
prova<-c()
for (i in (1:length(df[1,]))){
a<-c(mean(df[,i]),sd(df[,i]), max(df[,i]), min(df[,i]), tmpname[i])
prova<-as.data.frame(rbind(prova, a), stringsAsFactors = F)}
prova$V1<-as.numeric(as.character(prova$V1))
prova$V2<-as.numeric(as.character(prova$V2))
prova$V3<-as.numeric(as.character(prova$V3))
prova$V4<-as.numeric(as.character(prova$V4))
plot(as.factor(prova$V5),prova$V1, pch = 16, cex = 0.7, ylim=c(min(prova$V1),max(prova$V1)+(-min(prova$V1)+max(prova$V1))/4.5), col = "red", main = "AVG Values", ylab = "Mean")
text(as.factor(prova$V5),prova$V1, round(prova$V1,2), cex=0.7, pos=3, col="black")
plot(as.factor(prova$V5),prova$V2, pch = 16, cex = 0.7, ylim=c(min(prova$V2),max(prova$V2)+(-min(prova$V2)+max(prova$V2))/4.5), col = "blue", main = "Standard Deviation Values", ylab = "Standard Deviation")
text(as.factor(prova$V5),prova$V2, round(prova$V2,2), cex=0.7, pos=3, col="black")
plot(as.factor(prova$V5),prova$V3, pch = 16, cex = 0.7, ylim=c(min(prova$V3),max(prova$V3)+(-min(prova$V3)+max(prova$V3))/4.5), col = "green", main ="Max Values", ylab = "Max")
text(as.factor(prova$V5),prova$V3, round(prova$V3,2), cex=0.7, pos=3, col="black")
plot(as.factor(prova$V5),prova$V4, pch = 16, cex = 0.7, ylim=c(min(prova$V4),max(prova$V4)+(-min(prova$V4)+max(prova$V4))/4.5), col = "black", main ="Min Values", ylab = "Min")
text(as.factor(prova$V5),prova$V4, round(prova$V4,2), cex = 0.7, pos=3, col="black")
title(paste(Material, " - Statistics compare for ", Var), outer=TRUE)
}
#MainFun("Precision", FALSE)
ImportData("Precision")
data<-ImportData("Precision")
data<-ImportData("Robustness")
dati<-c()
dati2<-c()
for (k in (1:length(data))){
dati_temp<-as.data.frame(data[k])
dati<-cbind(dati,dati_temp[,2])
dati2<-c(dati2, dati_temp[,2])
}
dati<-as.data.frame(dati)
names<-c("ALU50%_200mm","ALU50%_400mm","ALU60%_200mm","ALU60%_400mm",
"NOALU50%_200mm","NOALU50%_400mm","NOALU60%_200mm","NOALU60%_400mm")
names(dati)<-names
setwd("C:/Users/nbenvenuti/Desktop/PMI/")
setwd("C:/Users/nbenvenuti/Desktop/PMI/")
source("Script/PMI_Functions_V5.R")
source("Script/PMI_Functions_V5.R")
data<-ImportData("Robustness")
data<-ImportData(Material)
dati<-c()
dati2<-c()
for (k in (1:length(data))){
dati_temp<-as.data.frame(data[k])
dati<-cbind(dati,dati_temp[,2])
dati2<-c(dati2, dati_temp[,2])
}
dati<-as.data.frame(dati)
names<-c("ALU50%_200mm","ALU50%_400mm","ALU60%_200mm","ALU60%_400mm",
"NOALU50%_200mm","NOALU50%_400mm","NOALU60%_200mm","NOALU60%_400mm")
names(dati)<-names
ImportData<-function(Material){
dati1 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%200mm.txt", header=TRUE)
dati2 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%400mm.txt", header=TRUE)
dati3 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%200mm.txt", header=TRUE)
dati4 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%400mm.txt", header=TRUE)
dati5 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%200mm.txt", header=TRUE)
dati6 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%400mm.txt", header=TRUE)
dati7 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%200mm.txt", header=TRUE)
dati8 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%400mm.txt", header=TRUE)
return(list(dati1, dati2, dati3, dati4, dati5, dati6, dati7, dati8))
}
Material("Robustness")
ImportData<-function(Material){
dati1 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%200mm.txt", header=TRUE)
dati2 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%400mm.txt", header=TRUE)
dati3 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%200mm.txt", header=TRUE)
dati4 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%400mm.txt", header=TRUE)
dati5 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%200mm.txt", header=TRUE)
dati6 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%400mm.txt", header=TRUE)
dati7 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%200mm.txt", header=TRUE)
dati8 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%400mm.txt", header=TRUE)
return(list(dati1, dati2, dati3, dati4, dati5, dati6, dati7, dati8))
}
data<-ImportData("Robustness")
data<-ImportData()
ImportData<-function(){
dati1 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%200mm.txt", header=TRUE)
dati2 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%400mm.txt", header=TRUE)
dati3 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%200mm.txt", header=TRUE)
dati4 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%400mm.txt", header=TRUE)
dati5 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%200mm.txt", header=TRUE)
dati6 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%400mm.txt", header=TRUE)
dati7 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%200mm.txt", header=TRUE)
dati8 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%400mm.txt", header=TRUE)
return(list(dati1, dati2, dati3, dati4, dati5, dati6, dati7, dati8))
}
data<-ImportData()
data<-ImportData(Material)
dati<-c()
dati2<-c()
for (k in (1:length(data))){
dati_temp<-as.data.frame(data[k])
dati<-cbind(dati,dati_temp[,2])
dati2<-c(dati2, dati_temp[,2])
}
dati<-as.data.frame(dati)
names<-c("ALU50%_200mm","ALU50%_400mm","ALU60%_200mm","ALU60%_400mm",
"NOALU50%_200mm","NOALU50%_400mm","NOALU60%_200mm","NOALU60%_400mm")
names(dati)<-names
setwd("C:/Users/nbenvenuti/Desktop/PMI/")
source("Script/PMI_Functions_V5.R")
ImportData<-function(){
dati1 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%200mm.txt", header=TRUE)
dati2 <- read.table("./data/Raw Data Validation RT/Robustness/ALU50%400mm.txt", header=TRUE)
dati3 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%200mm.txt", header=TRUE)
dati4 <- read.table("./data/Raw Data Validation RT/Robustness/ALU60%400mm.txt", header=TRUE)
dati5 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%200mm.txt", header=TRUE)
dati6 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU50%400mm.txt", header=TRUE)
dati7 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%200mm.txt", header=TRUE)
dati8 <- read.table("./data/Raw Data Validation RT/Robustness/NOALU60%400mm.txt", header=TRUE)
return(list(dati1, dati2, dati3, dati4, dati5, dati6, dati7, dati8))
}
data<-ImportData()
dati<-c()
dati2<-c()
for (k in (1:length(data))){
dati_temp<-as.data.frame(data[k])
dati<-cbind(dati,dati_temp[,2])
dati2<-c(dati2, dati_temp[,2])
}
dati<-as.data.frame(dati)
names<-c("ALU50%_200mm","ALU50%_400mm","ALU60%_200mm","ALU60%_400mm",
"NOALU50%_200mm","NOALU50%_400mm","NOALU60%_200mm","NOALU60%_400mm")
names(dati)<-names
df<-dati
x$pnum
x$pnum=length(df[1,])
veralSamplesOverview<-function(df) {
x<-list()
s<-list()
x$pnum=length(df[1,])
x$tnum=0
x$tnum2=0
x<-list()
s<-list()
x$pnum=length(df[1,])
x$tnum=0
x$tnum2=0
x$pnum
for (i in (1:x$pnum)){
s[i]<-sd(df[i,])
}
for (i in (1:x$pnum)){x$tnum=x$tnum+length(df[,i])
x$tnum2=x$tnum2+length(df[,i])^2}
# Multiple Linear Regression
# Before prform multiple linear regression verify this assumption:
# 1) Linearity
# 2) Homoscedasticity
# 3) Multivariate Normality
# 4) Indipendence of Errors
# 5) Lack of multicollinearity
# Set Working Directory
setwd("C:\\Users/nbenvenuti/Desktop/Tutorial PyR/Machine Learning/Part 2 - Regression/Section 2.3 - Multiple Linear Regression/")
# Import Dataset
dataset <- read.csv("./Data/50_Startups.csv")
# Encoding Categorical Data
dataset$State <- factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
# Splitting the dataset
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == T)
test_set = subset(dataset, split == F)
# Feature Scaling
# training_set[,2:3] = scale(training_set[,2:3])
# test_set[,2:3] = scale(test_set[,2:3])
# Fitting Multiple Linear Regression
regressor = lm(formula = Profit ~ ., data = training_set)
summary(regressor)
y_pred <- predict(regressor, newdata = test_set)
# Building multiple regression model backward
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
# Removing State
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
# Removing Administration
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
View(training_set)
SL = 0.05
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
print(summary(regressor))
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
backwardElimination(training_set, SL)
