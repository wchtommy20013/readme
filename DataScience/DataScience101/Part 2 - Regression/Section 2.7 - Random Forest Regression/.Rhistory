#------------------------------------------------------------------------------------------------------
#Load DB Parameter
dbconnection <- odbcDriverConnect(Dbconnect())
#Load data
#incassi DWIINCA
L1_Curve_inc<-sqlQuery(dbconnection,"select LTRIM(RTRIM(fatt.COD_RAND_PRTT)) as COD_RAND_PRTT,
fatt.NUM_PR_LIN_CREDITO,
fatt.COD_TIPO_PRTT,
fatt.COD_NDG_CEDE,
fatt.COD_NDG_DEBI_FCTG,
fatt.DAT_EMIS,
fatt.DAT_REGI,
fatt.DAT_RIFE,
fatt.DAT_FRCG_FACT,
fatt.DAT_CSTA,
fatt.IMP_FACC,
fatt.DAT_CHIU_DEBI_FCTG,
fatt.DAT_SCAD_DEBI_FCTG,
fatt.DAT_SCAD_MATY,
fatt.DAT_NOTF,
fatt.DAT_SCAD_EMIT,
concat(fatt.COD_RAND_PRTT, '_', fatt.NUM_PR_LIN_CREDITO) as ID,
concat(fatt.COD_NDG_DEBI_FCTG, '_', fatt.NUM_PR_LIN_CREDITO, '_',fatt.COD_NDG_CEDE) as key_indicatori,
inc.DAT_SCAD_DSO,
inc.DAT_CONT,
inc.DAT_VALU,
inc.PRG_RIGA,
inc.IMP_MOVI,
cred.IMP_NCRE,
anag_debi.COD_SOGGETTO as COD_SOGGETTO_DEBI,
anag_debi.COD_NAZI as COD_NAZI_DEBI,
anag_debi.COD_SETT_BAIT as COD_SETT_BAIT_DEBI,
anag_debi.COD_ATEC as COD_ATEC_DEBI,
anag_cede.COD_SOGGETTO as COD_SOGGETTO_CEDE,
anag_cede.COD_NAZI as COD_NAZI_CEDE,
anag_cede.COD_SETT_BAIT as COD_SETT_BAIT_CEDE,
anag_cede.COD_ATEC as COD_ATEC_CEDE,
lin.COD_LINEA_SISTEMA,
lin.COD_DIVS,
lin.FLG_UTO,
lin.FLG_MATY,
lin.FLG_DILA,
lin.FLG_ACQU,
lin.FLG_NOTF,
lin.FLG_RICO,
lin.FLG_MAND,
lic.FLG_CLAS_CRED,
lic.FLG_SCON,
lic.FLG_SOLO_GEST
from DWIFCT.staging.DWHT_DWIPART fatt left join DWIFCT.staging.DWHT_DWIINCA inc on LTRIM(RTRIM(fatt.COD_RAND_PRTT))=LTRIM(RTRIM(inc.COD_RAND_PRTT)) and fatt.NUM_PR_LIN_CREDITO=inc.NUM_PR_LIN_CREDITO
left join DWIFCT.staging.DWHT_DWICRED cred on fatt.COD_NDG_DEBI_FCTG=cred.COD_NDG_DEBI and fatt.COD_NDG_CEDE=cred.COD_NDG_CEDE and fatt.NUM_PR_LIN_CREDITO=cred.NUM_PR_LIN_CREDITO
left join DWIFCT.staging.DWHT_DWIANAG anag_debi on fatt.COD_NDG_DEBI_FCTG=anag_debi.COD_SOGGETTO
left join DWIFCT.staging.DWHT_DWIANAG anag_cede on fatt.COD_NDG_DEBI_FCTG=anag_cede.COD_SOGGETTO
left join DWIFCT.dwh.DIM_LINEA lin on fatt.NUM_PR_LIN_CREDITO=lin.NUM_PR_LIN_CREDITO
left join DWIFCT.staging.GDET_CTLLSIST lic on lin.COD_LINEA_SISTEMA=lic.COD_LINEA_SISTEMA
where
fatt.COD_TIPO_PRTT = 'P01'
and fatt.DAT_FRCG_FACT is not null
and fatt.COD_NDG_CEDE <> 4975 and fatt.COD_NDG_CEDE <> 1 and fatt.COD_STAT_PRTT!=10
and fatt.DAT_REGI > '2013-12-31'
and inc.COD_TIPO_PRTT='P01' and inc.COD_NDG_CEDE <> 4975
and inc.COD_NDG_CEDE <> 1
and inc.DAT_SCAD_DSO <> '0001-01-01'
and inc.DAT_REGI > '2013-12-31'
and anag_debi.COD_SETT_BAIT <> 600
and anag_debi.COD_SETT_BAIT <> 614
and anag_cede.COD_SETT_BAIT <> 600
and anag_cede.COD_SETT_BAIT <> 614
and lin.COD_LINEA_SISTEMA <> 0
and lic.COD_LING_USER=86")
odbcClose(dbconnection)
View(L1_Curve_inc)
ciao<-read.csv("C:\\SACE/L1_Data/L1_Curve_Corporate.csv", sep="|")
names(ciao)
names(L1_Curve_inc)
View(L1_Curve_inc)
#LOAD LIBRARY
library(RODBC)
options("scipen"=999, "digits"=4)
#Macro di configurazione
M_Server   <-'ftrmicsql01.isace.it'
M_Port     <-'3433'
M_UserId   <-'FCTUser'
M_Password <-'PWD.effeciti2017'
M_Database <-'DWIFCT'
#Connessione con il Database di produzione
Dbconnect <- function(){
#stat. Db parameter
string <- paste('driver=SQl Server; server=',M_Server,',',M_Port,'; database=',M_Database,'; Uid=',M_UserId,'; Pwd=',M_Password, sep="")
return(string)
}
#------------------------------------------------------------------------------------------------------
#START EXTRACT
#------------------------------------------------------------------------------------------------------
#Load DB Parameter
dbconnection <- odbcDriverConnect(Dbconnect())
#Load data
#incassi DWIINCA
sqlQuery(dbconnection,"insert into stat.L1_CRV_INC (ID,KEY,COD_RAND_PRTT,	DAT_REGI,DAT_CHIU_DEBI_FCTG,
COD_TIPO_PRTT,COD_NDG_CEDE,DAT_CSTA,COD_NDG_DEBI_FCTG,DAT_RIFE,IMP_MOVI,IMP_FACC,
DAT_FRCG_FACT,DAT_CONT,DAT_SCAD_DSO,DAT_SCAD_EMIT,DAT_EMIS,DAT_SCAD_DEBI_FCTG,
DAT_SCAD_MATY,DAT_NOTF,DAT_VALU,PRG_RIGA,IMP_NCRE,COD_SOGGETTO_DEBI,COD_SOGGETTO_CEDE,
COD_NAZI_DEBI,COD_NAZI_CEDE,COD_SETT_BAIT_DEBI,COD_SETT_BAIT_CEDE,COD_ATEC_DEBI,
COD_ATEC_CEDE,COD_LINEA_SISTEMA,COD_DIVS,FLG_UTO,FLG_MATY,FLG_DILA,FLG_ACQU,FLG_NOTF,
FLG_RICO,FLG_MAND,FLG_CLAS_CRED,FLG_SCON,FLG_SOLO_GEST)
select LTRIM(RTRIM(fatt.COD_RAND_PRTT)) as COD_RAND_PRTT,
fatt.NUM_PR_LIN_CREDITO,
fatt.COD_TIPO_PRTT,
fatt.COD_NDG_CEDE,
fatt.COD_NDG_DEBI_FCTG,
fatt.DAT_EMIS,
fatt.DAT_REGI,
fatt.DAT_RIFE,
fatt.DAT_FRCG_FACT,
fatt.DAT_CSTA,
fatt.IMP_FACC,
fatt.DAT_CHIU_DEBI_FCTG,
fatt.DAT_SCAD_DEBI_FCTG,
fatt.DAT_SCAD_MATY,
fatt.DAT_NOTF,
fatt.DAT_SCAD_EMIT,
concat(fatt.COD_RAND_PRTT, '_', fatt.NUM_PR_LIN_CREDITO) as ID,
concat(fatt.COD_NDG_DEBI_FCTG, '_', fatt.NUM_PR_LIN_CREDITO, '_',fatt.COD_NDG_CEDE) as KEY,
inc.DAT_SCAD_DSO,
inc.DAT_CONT,
inc.DAT_VALU,
inc.PRG_RIGA,
inc.IMP_MOVI,
cred.IMP_NCRE,
anag_debi.COD_SOGGETTO as COD_SOGGETTO_DEBI,
anag_debi.COD_NAZI as COD_NAZI_DEBI,
anag_debi.COD_SETT_BAIT as COD_SETT_BAIT_DEBI,
anag_debi.COD_ATEC as COD_ATEC_DEBI,
anag_cede.COD_SOGGETTO as COD_SOGGETTO_CEDE,
anag_cede.COD_NAZI as COD_NAZI_CEDE,
anag_cede.COD_SETT_BAIT as COD_SETT_BAIT_CEDE,
anag_cede.COD_ATEC as COD_ATEC_CEDE,
lin.COD_LINEA_SISTEMA,
lin.COD_DIVS,
lin.FLG_UTO,
lin.FLG_MATY,
lin.FLG_DILA,
lin.FLG_ACQU,
lin.FLG_NOTF,
lin.FLG_RICO,
lin.FLG_MAND,
lic.FLG_CLAS_CRED,
lic.FLG_SCON,
lic.FLG_SOLO_GEST
from DWIFCT.staging.DWHT_DWIPART fatt left join DWIFCT.staging.DWHT_DWIINCA inc on LTRIM(RTRIM(fatt.COD_RAND_PRTT))=LTRIM(RTRIM(inc.COD_RAND_PRTT)) and fatt.NUM_PR_LIN_CREDITO=inc.NUM_PR_LIN_CREDITO
left join DWIFCT.staging.DWHT_DWICRED cred on fatt.COD_NDG_DEBI_FCTG=cred.COD_NDG_DEBI and fatt.COD_NDG_CEDE=cred.COD_NDG_CEDE and fatt.NUM_PR_LIN_CREDITO=cred.NUM_PR_LIN_CREDITO
left join DWIFCT.staging.DWHT_DWIANAG anag_debi on fatt.COD_NDG_DEBI_FCTG=anag_debi.COD_SOGGETTO
left join DWIFCT.staging.DWHT_DWIANAG anag_cede on fatt.COD_NDG_DEBI_FCTG=anag_cede.COD_SOGGETTO
left join DWIFCT.dwh.DIM_LINEA lin on fatt.NUM_PR_LIN_CREDITO=lin.NUM_PR_LIN_CREDITO
left join DWIFCT.staging.GDET_CTLLSIST lic on lin.COD_LINEA_SISTEMA=lic.COD_LINEA_SISTEMA
where
fatt.COD_TIPO_PRTT = 'P01'
and fatt.DAT_FRCG_FACT is not null
and fatt.COD_NDG_CEDE <> 4975 and fatt.COD_NDG_CEDE <> 1 and fatt.COD_STAT_PRTT!=10
and fatt.DAT_REGI > '2013-12-31'
and inc.COD_TIPO_PRTT='P01' and inc.COD_NDG_CEDE <> 4975
and inc.COD_NDG_CEDE <> 1
and inc.DAT_SCAD_DSO <> '0001-01-01'
and inc.DAT_REGI > '2013-12-31'
and anag_debi.COD_SETT_BAIT <> 600
and anag_debi.COD_SETT_BAIT <> 614
and anag_cede.COD_SETT_BAIT <> 600
and anag_cede.COD_SETT_BAIT <> 614
and lin.COD_LINEA_SISTEMA <> 0
and lic.COD_LING_USER=86")
dbcClose(dbconnection)
load("C:/Users/nbenvenuti/Desktop/Vodafone/FlightDelays/FlightDelaysEnvironment_Finale.RData")
finalfeat<-feat[complete.cases(finalfeat),]
finalfeat<-feat[complete.cases(feat),]
feat<-merge(finalefeat_temp, finalefeat, by=c("AirportID","datetime","hour"), all.x=TRUE)
summary(feat)
summary(feat)
finalefeat_temp1<-merge(Weatherfeat, compfeat, by=c("TimeStamp","AirportID"), all.x=TRUE)
finalefeat_temp2<-cbind(FlightsDelays, errorfeat)
feat<-merge(finalefeat_temp2, finalefeat_temp1, by=c("AirportID","datetime","hour"), all.x=TRUE)
save.image("C:/Users/nbenvenuti/Desktop/Vodafone/FlightDelays/FlightDelaysEnvironment_Finale.RData")
Weatherfeat<-as.data.table(Weatherfeat)
setkey(Weatherfeat, TimeStamp, AirportID)
compfeat<-as.data.table(compfeat)
setkey(compfeat, TimeStamp, AirportID)
finalefeat<-merge(Weatherfeat, compfeat, by=c("TimeStamp","AirportID"), all.x=TRUE)
FlightsDelays<-FlightsDelays[order(FlightsDelays$Carrier,FlightsDelays$datetime,FlightsDelays$TimeStamp),  ]
FlightsDelays<-as.data.table(FlightsDelays)
setkey(FlightsDelays, datetime, Carrier)
errorfeat<-errorfeat[order(errorfeat$Carrier,errorfeat$datetime),]
errorfeat<-as.data.table(errorfeat)
setkey(errorfeat, datetime, Carrier)
finalefeat_temp<-cbind(FlightsDelays, errorfeat)
names(finalefeat_temp)[6]<-c("AirportID")
names(finalefeat_temp)[20]<-c("bdd")
names(finalefeat_temp)[21]<-c("cdd")
feat<-merge(finalefeat_temp, finalefeat, by=c("AirportID","datetime","hour"), all.x=TRUE)
summary(feat)
finalfeat<-feat[complete.cases(feat),]
head(finalfeat, 10)
save.image("C:/Users/nbenvenuti/Desktop/Vodafone/FlightDelays/FlightDelaysEnvironment_Finale.RData")
library("dplyr") # Data munging functions
library(RMySQL)
library(ggplot2)
library(lubridate)
library(dplyr)
library(data.table)
library(zoo)
con<-dbConnect(DbconnectMysql())
pres<-dbGetQuery(con, "select * from l0_pressure_nowork")
pres$DATE_RIFE<-as.POSIXct(pres$DATE_RIFE)
#MySQL DB Conn
DbconnectMysql <- function(){
string2 <- dbConnect(MySQL(),dbname = "ge_avio",host = "localhost",port = 3308,user = "homenet", password = "homenet1.")
return(string2)
}
con<-dbConnect(DbconnectMysql())
pres<-dbGetQuery(con, "select * from l0_pressure_nowork")
pres$DATE_RIFE<-as.POSIXct(pres$DATE_RIFE)
con<-dbConnect(DbconnectMysql())
library(RMySQL)
library(ggplot2)
library(lubridate)
library(dplyr)
library(data.table)
library(zoo)
#MySQL DB Conn
DbconnectMysql <- function(){
string2 <- dbConnect(MySQL(),dbname = "ge_avio",host = "localhost",port = 3306,user = "root", password = "MYSQL")
return(string2)
}
con<-dbConnect(DbconnectMysql())
pres<-dbGetQuery(con, "select * from l0_pressure_nowork")
pres$DATE_RIFE<-as.POSIXct(pres$DATE_RIFE)
id=1
df<-pres[pres$WORK_ID==id,]
dfvar <- df %>%
arrange(DATE_RIFE) %>%
mutate(VAR = round(rollapply(V1, width = 3, FUN = sd, align = "center", fill = NA, by = 1),5),
MEAN = round(rollapply(V1, width = 3, FUN = mean, align = "center", fill = NA, by = 1),5)) %>%
ungroup()
mediana<-median(df$V1)
cond<-dfvar[dfvar$VAR>3]
df<-pres[pres$WORK_ID==id,]
dfvar <- df %>%
arrange(DATE_RIFE) %>%
mutate(VAR = round(rollapply(V1, width = 3, FUN = sd, align = "center", fill = NA, by = 1),5),
MEAN = round(rollapply(V1, width = 3, FUN = mean, align = "center", fill = NA, by = 1),5)) %>%
ungroup()
mediana<-median(df$V1)
cond<-dfvar[dfvar$VAR>3,]
View(cond)
View(df)
View(dfvar)
cond<-dfvar[dfvar$VAR>3 & !is.na(dfvar),]
View(cond)
cond<-dfvar[dfvar$VAR>3,]
View(cond)
cond<-dfvar[(dfvar$VAR>3),]
View(cond)
cond<-cond[!is.na(cond),]
View(cond)
cond<-cond[!is.na(cond$VAR),]
mediana<-median(df$MEAN)
mediana<-median(dfvar$MEAN)
mediana<-median(dfvar$MEANm , rm.na=T)
mediana<-median(dfvar$MEAN, rm.na=T)
mediana<-median(dfvar$MEAN, na.rm = T)
mediana<-mean(dfvar$MEAN, na.rm = T)
timelapse<-dfvar$DATE_RIFE[dfvar$VAR>3]
timelapse<-timelapse[!is.na(timelapse)]
length(timelapse)
split(dfvar, dfvar$VAR>3)
ciao<-split(dfvar, dfvar$VAR>3)
dfvar<-dfvar[2:(nrow(dfvar)-1,]
dfvar<-dfvar[2:(nrow(dfvar)-1),]
ciao<-split(dfvar, dfvar$VAR>3)
timelapse<-dfvar$DATE_RIFE[dfvar$VAR>3]
df<-pres[pres$WORK_ID==id,]
dfvar <- df %>%
arrange(DATE_RIFE) %>%
mutate(VAR = round(rollapply(V1, width = 3, FUN = sd, align = "center", fill = NA, by = 1),5),
MEAN = round(rollapply(V1, width = 3, FUN = mean, align = "center", fill = NA, by = 1),5)) %>%
ungroup()
dfvar<-dfvar[2:(nrow(dfvar)-1),]
media<-mean(dfvar$MEAN, na.rm = T)
timelapse<-dfvar$DATE_RIFE[dfvar$VAR>3]
for (i in 1:nrow(dfvar)) {
if (dfvar$DATE_RIFE[i] %in% timelapse){
if (dfvar$MEAN[i] > media) {
dfvar$Trigger<-1
} else {
dfvar$Trigger<-0
}
} else {
next()
}
}
View(dfvar)
media<-mean(dfvar$MEAN, na.rm = T)
media<-mean(dfvar$MEAN, na.rm = T)
timelapse<-dfvar$DATE_RIFE[dfvar$VAR>3]
for (i in 1:length(timelapse)) {
df_time<-dfvar[dfvar$DATE_RIFE>=timelapse[i] & dfvar$DATE_RIFE<=timelapse[i-1],]
if (mean(df_time$V1)>media){
df_time$trigger<-1
} else {
df_time$trigger<-0
}
}
i=1
df_time<-dfvar[dfvar$DATE_RIFE>=timelapse[i] & dfvar$DATE_RIFE<=timelapse[i-1],]
timelapse[i]
df_time<-dfvar[dfvar$DATE_RIFE>=timelapse[i] & dfvar$DATE_RIFE<=timelapse[i+1],]
View(df_time)
patternDist <- function(x,pattern){
apply(sign(x), 1,
function(row){
v <- row - pattern
v[is.na(pattern) & is.na(row)] <- 0
v[xor(is.na(pattern), is.na(row))] <- 1
sum( v != 0 )
})
}
x <- matrix(rnorm(40),nrow=10)
x[sample(40,4)] <- 0
x[sample(40,4)] <- NA
x <- as.data.frame(x)
View(x)
ciao<-patternDist(x)
View(df_time)
timelapse<-dfvar$DATE_RIFE[dfvar$VAR>3]
timelapse<-as.data.frame(dfvar$DATE_RIFE[dfvar$VAR>3])
View(timelapse)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="C:\\Users/nbenvenuti/Desktop/installed_packages.rda")
load("C:\\Users/nbenvenuti/Desktop/installed_packages.rda")
install.packages(installedpackages)
library(ggplot2)
library(readr)
library(nortest)
plot(xs,wave.2,type="l",ylim=c(-1,1)); abline(h=0,lty=3)
xs <- seq(-2*pi,2*pi,pi/100)
wave.1 <- sin(3*xs)
wave.2 <- sin(10*xs)
par(mfrow = c(1, 2))
plot(xs,wave.1,type="l",ylim=c(-1,1)); abline(h=0,lty=3)
plot(xs,wave.2,type="l",ylim=c(-1,1)); abline(h=0,lty=3)
wave.3 <- 0.5 * wave.1 + 0.25 * wave.2
plot(xs,wave.3,type="l"); title("Eg complex wave"); abline(h=0,lty=3)
plot.fourier <- function(fourier.series, f.0, ts) {
w <- 2*pi*f.0
trajectory <- sapply(ts, function(t) fourier.series(t,w))
plot(ts, trajectory, type="l", xlab="time", ylab="f(t)"); abline(h=0,lty=3)
}
# An eg
plot.fourier(function(t,w) {sin(w*t)}, 1, ts=seq(0,1,1/100))
acq.freq <- 100                    # data acquisition frequency (Hz)
time     <- 6                      # measuring time interval (seconds)
ts       <- seq(0,time,1/acq.freq) # vector of sampling time-points (s)
f.0      <- 1/time                 # fundamental frequency (Hz)
dc.component       <- 0
component.freqs    <- c(3,10)      # frequency of signal components (Hz)
component.delay    <- c(0,0)       # delay of signal components (radians)
component.strength <- c(.5,.25)    # strength of signal components
f <- function(t,w) {
dc.component +
sum( component.strength * sin(component.freqs*w*t + component.delay))
}
plot.fourier(f,f.0,ts)
setwd("C:/Users/nbenvenuti/Desktop/Tutorial PyR/Machine Learning/Part 2 - Regression/Section 2.5 - Support Vector Regression (SVR)/")
install.packages("e1071")
library(e1071)
library(e1071)
# set environment
setwd("C:/Users/nbenvenuti/Desktop/Tutorial PyR/Machine Learning/Part 2 - Regression/Section 2.5 - Support Vector Regression (SVR)/")
# Importing the dataset
dataset = read.csv('./Data/Position_Salaries.csv')
dataset = dataset[2:3]
regressor = svm(formula = Salary ~ .,
data=dataset,
type= 'eps-regression')
View(dataset)
y_pred=predict(regressor, data.frame(Level=6.5))
library(ggplot2)
# Plotting Results Linear Regression
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=dataset$Level, y=predict(lin_reg)), col="blue")
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=dataset$Level, y=predict(regressor)), col="blue")
x_grid=seq(min(dataset$Level), max(dataset$Level), by = 0.1)
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=x_grid, y=predict(regressor, newdata = data.frame(Level = x_grid, Level2=x_grid^2, Level3=x_grid^3))), col="blue") +
ggtitle("Truth or Bluff (Polynomial Regression)") +
xlab("Level") +
ylab("Salary")
library(rpart)
# Decision Tree Regression Model
#install.packages('rpart')
library(rpart)
# set environment
setwd("C:/Users/nbenvenuti/Desktop/Tutorial PyR/Machine Learning/Part 2 - Regression/Section 2.5 - Support Vector Regression (SVR)/")
# Importing the dataset
dataset = read.csv('./Data/Position_Salaries.csv')
dataset = dataset[2:3]
# # Splitting the dataset
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Profit, SplitRatio = 0.8)
# training_set = subset(dataset, split == T)
# test_set = subset(dataset, split == F)
# Fitting SVR to the dataset
regressor = rpart(formula = Salary ~ .,
data=dataset,
control = rpart.control(minsplit = 1))
y_pred=predict(regressor, data.frame(Level=6.5))
library(ggplot2)
# Plotting Results Linear Regression
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=dataset$Level, y=predict(regressor)), col="blue")
# Plotting Results Polynomial Regression with high definition and smoother curve
x_grid=seq(min(dataset$Level), max(dataset$Level), by = 0.1)
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=x_grid, y=predict(regressor, newdata = data.frame(Level = x_grid, Level2=x_grid^2, Level3=x_grid^3))), col="blue") +
ggtitle("Truth or Bluff (Polynomial Regression)") +
xlab("Level") +
ylab("Salary")
x_grid=seq(min(dataset$Level), max(dataset$Level), by = 0.01)
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=x_grid, y=predict(regressor, newdata = data.frame(Level = x_grid, Level2=x_grid^2, Level3=x_grid^3))), col="blue") +
ggtitle("Truth or Bluff (Polynomial Regression)") +
xlab("Level") +
ylab("Salary")
install.packages("randomForest")
library(randomForest)
setwd("C:/Users/nbenvenuti/Desktop/Tutorial PyR/Machine Learning/Part 2 - Regression/Section 2.7 - Random Forest Regression/")
dataset = read.csv('./Data/Position_Salaries.csv')
dataset = dataset[2:3]
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 10)
y_pred=predict(regressor, data.frame(Level=6.5))
x_grid=seq(min(dataset$Level), max(dataset$Level), by = 0.01)
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=x_grid, y=predict(regressor, newdata = data.frame(Level = x_grid, Level2=x_grid^2, Level3=x_grid^3))), col="blue") +
ggtitle("Truth or Bluff (Random Forest Regression)") +
xlab("Level") +
ylab("Salary")
# Decision Tree Regression Model
#install.packages('randomForest')
library(randomForest)
# set environment
setwd("C:/Users/nbenvenuti/Desktop/Tutorial PyR/Machine Learning/Part 2 - Regression/Section 2.7 - Random Forest Regression/")
# Importing the dataset
dataset = read.csv('./Data/Position_Salaries.csv')
dataset = dataset[2:3]
# # Splitting the dataset
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Profit, SplitRatio = 0.8)
# training_set = subset(dataset, split == T)
# test_set = subset(dataset, split == F)
# Fitting SVR to the dataset
set.seed(1234)
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 10)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
x_grid=seq(min(dataset$Level), max(dataset$Level), by = 0.01)
ggplot() +
geom_point(aes(x=dataset$Level, y=dataset$Salary), col="red") +
geom_line(aes(x=x_grid, y=predict(regressor, newdata = data.frame(Level = x_grid, Level2=x_grid^2, Level3=x_grid^3))), col="blue") +
ggtitle("Truth or Bluff (Random Forest Regression)") +
xlab("Level") +
ylab("Salary")
set.seed(1234)
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 100)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 500)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 100)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 100)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 100)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
set.seed(1234)
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 500)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
set.seed(1234)
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 500)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
set.seed(1234)
regressor = randomForest(x=dataset[1], y=dataset$Salary, ntree = 500)
# Prediction for 6.5 years of experience salary
y_pred=predict(regressor, data.frame(Level=6.5))
